

#–ê–ö–¢–£–ê–õ–¨–ù–´–ô 
import logging
import asyncio
import nest_asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from math import ceil, floor

TOKEN = "6816802285:AAHJZYNriP32u-RXFgIEa-i6KnFnlWdECgE"

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

logging.basicConfig(level=logging.INFO)

class Form(StatesGroup):
    gender = State()
    weight = State()
    height = State()
    age = State()

def round_to_5(value, method):
    return ceil(value / 5) * 5 if method == "ceil" else floor(value / 5) * 5

def calculate_maintenance(gender, weight, height, age):
    if gender.lower() == "–º—É–∂—á–∏–Ω–∞":
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
        method = "ceil"
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
        method = "floor"

    bmr -= 200 if bmr < 1800 else 300

    maintenance = round_to_5(bmr / 13, method)
    loss = round_to_5(maintenance * 0.9, method)
    gain = round_to_5(maintenance * 1.15, method)

    return loss, maintenance, gain

@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.set_state(Form.gender)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–ú—É–∂—á–∏–Ω–∞/–ñ–µ–Ω—â–∏–Ω–∞):")

@dp.message(Form.gender)
async def get_gender(message: Message, state: FSMContext):
    gender = message.text.lower()
    if gender not in ["–º—É–∂—á–∏–Ω–∞", "–∂–µ–Ω—â–∏–Ω–∞"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ '–ú—É–∂—á–∏–Ω–∞' –∏–ª–∏ '–ñ–µ–Ω—â–∏–Ω–∞'")
        return
    await state.update_data(gender=gender)
    await state.set_state(Form.weight)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –≤–µ—Å (–∫–≥):")

@dp.message(Form.weight)
async def get_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        await state.update_data(weight=weight)
        await state.set_state(Form.height)
        await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (—Å–º):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞.")

@dp.message(Form.height)
async def get_height(message: Message, state: FSMContext):
    try:
        height = float(message.text)
        await state.update_data(height=height)
        await state.set_state(Form.age)
        await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞.")

@dp.message(Form.age)
async def get_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        user_data = await state.get_data()
        loss, maintenance, gain = calculate_maintenance(user_data['gender'], user_data['weight'], user_data['height'], age)

        response = (
            f" –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –î–∏–µ—Ç—ã 2+1:\n"
            f"‚úÖ –í–∞—à –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è: {loss} –≥—Ä\n"
            f" ‚öñ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞: {maintenance} –≥—Ä\n"
            f"üìà –í–∞—à –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –Ω–∞–±–æ—Ä–∞ –≤–µ—Å–∞: {gain} –≥—Ä\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!"
        )

        await message.answer(response)
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞.")

nest_asyncio.apply()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
